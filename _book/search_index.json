[["temel-nesneler.html", "Bölüm5 Temel Nesneler 5.1 Aritmetik (Arithmetic) 5.2 Nesneleri Tanımlama (Assigning Objects) 5.3 Vektörler (Vectors) 5.4 Matrisler (Matrices) 5.5 Listeler ve Data Frameler (Lists and Data Frames) 5.6 Nümerik Olmayan Değerler (Non-Numeric Values) 5.7 Eksik Gözlemler (Missing Values)", " Bölüm5 Temel Nesneler Bu bölümde kodlama için ihtiyaç duyacağınız temel yapılar açıklanacak ve uygulamalar ile desteklenecektir. Farklı uygulamalar ders esnasında eş zamanlı yapılacağından lütfen online dersleri takip ediniz. 5.1 Aritmetik (Arithmetic) R, en basit haliyle hesap makinesi olarak kullanılabilir. Toplama +, çıkarma -, çarpma *, bölme / operatörleri ile gerçekleştirilir. 5+4 ## [1] 9 Birden fazla matematiksel işlem aynı satırda gerçekleştirilebilir. 3+4; 6*4; 10-2 ## [1] 7 ## [1] 24 ## [1] 8 İşlemler parantez yardımıyla önceliğine göre yazılabilir, yazılmadığı taktirde matematiksel işlem önceliği geçerlidir. 10*2-3 ## [1] 17 İşlem devam edecek biçimde tanımlanırsa console + simgesi ile devam edecek ve işlem tamamlanana kadar yeni işleme geçmenize engel olacaktır. İşlemi tamamlamalı veya yeni işleme geçmek için esc tuşunu kullanmalısınız. 10+20+30+ 40 ## [1] 100 Yapılan işlemler sonucu elde edilen çok büyük veya çok küçük sonuçlar için output exponent olarak verilir. 12000*3000 ## [1] 3.6e+07 1.3e2 (130 anlamına gelir. e2: ondalık noktasını iki basamak sağa taşı) 1.4e-1 (0.14 anlamına gelir. e-1: ondalık noktasını bir basamak sola taşı) Uygulamada elde edilen sonucun integer (tamsayı) olması gerekebilir. Bu noktada elde edilen output üste, alta veya 0.5 üzeri ya da altı olma durumuna göre farklı komutlar yardımı ile yuvarlanabilir. floor: alta yuvarla floor(5.2); floor(5.7) ## [1] 5 ## [1] 5 ceilign: üste yuvarla ceiling(3.2); ceiling(3.8) ## [1] 4 ## [1] 4 round: 0.5 üzeri ise üste, 0.5 altı ise alta yuvarla round(5.6); round(5.3) ## [1] 6 ## [1] 5 Negatif sayılarda komutların nasıl işlediğini inceleyebilirsiniz. round komutu ile virgülden sonra kaç basamak olması gerektiğini belirterek yuvarlama işlemi yapabilirsiniz. round(1.248,2) ## [1] 1.25 Kullanılabilecek matematiksel fonksiyonlara örnek olarak (Crawley 2012) 5.2 Nesneleri Tanımlama (Assigning Objects) Temel işlevlerden bir diğeri kullanılacak değişkenlerin tanımlanmasıdır. Değişken için seçilecek isim mümkün olan en kısa haliyle tanımlanarak kavram kargaşası önlenmelidir. R, büyük ve küçük harfe duyarlıdır, dolayısıyla tanımlanan \\(B\\) ve \\(b\\) iki farklı değişkeni temsil eder. Değişken ismi iki veya daha fazla kelimeden oluşacaksa kelimeler arasında boşluk yerine nokta kullanılmalıdır. (neura link) Değişken ismi sayı veya sembol ile başlayamaz. (1a, &amp;b) Değişken tanımlama işlemi &lt;- operatörü ile gerçekleştirilir. Tanımlanan değişken adı ile çağrılmazsa veya print komutu kullanılmazsa çıktı yazdırılmaz. x&lt;-3 print(x) ## [1] 3 Sayısal olmayan değer tanımlamaları tırnak içerisinde yapılmalıdır. msg&lt;- &quot;hello world&quot; Tanımlanan değişken veya fonksiyon ile ilgili notlar # ile tanımlanır. x.ort&lt;-20 # ortalama değer Çıktıda basılan [.] kaçıncı gözlemden devam edildiğini gösterir. Örneğin 30 gözleminin [26] ifadesinin yardımı ile 26. gözlem olduğunu kolaylıkla söyleyebiliriz. [.] ifadeleri asıl seride yer almaz, yalnızca yol gösterici olarak çıktıda gözlenir. x&lt;-5:50 x ## [1] 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ## [26] 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 5.3 Vektörler (Vectors) Vektör oluşturmak için c() operatör kullanılmaktadır. Vektörler numeric character logical integer complex yapıları içerebilir. Vektörler yalnızca aynı yapıda gözlemler içerebilir. x &lt;- c(0.5, 0.6) # numeric x &lt;- c(TRUE, FALSE) # logical x &lt;- c(T, F) # logical x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # character x &lt;- 9:29 # integer x &lt;- c(1+0i, 2+4i) # complex T ve F, TRUE ve FALSE’a karşılık kullanılan kısaltma yapılardır. x &lt;- c(T, F) # logical x ## [1] TRUE FALSE Aynı zamanda vector komutu ile de vektör oluşturabilirsiniz. Vektörü tanımlarken belirlenen içerik yapısına göre oluşturulur. x &lt;- vector(&quot;numeric&quot;, length = 7) x ## [1] 0 0 0 0 0 0 0 Complex elemanları içerecek bir vektör oluşturmak istendiğinde; x &lt;- vector(&quot;complex&quot;, length = 7) x ## [1] 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i Aynı değişken adı birden fazla tanımlamada kullanılırsa yapılan son tanımlama geçerli olacaktır. Kod yazarken kullandığınız değişken isimlerine ve doğru yazıma dikkat ediniz. Vektör aynı yapıda gözlemlerden oluşmuyorsa? Bu durumda tüm gözlemler tek bir yapı olarak algılanır. Herhangi bir değişkenin hangi yapıda gözlem içerdiği class() komutu ile sorgulanabilir. y &lt;- c(1.7, &quot;a&quot;) # character class(y) ## [1] &quot;character&quot; y &lt;- c(TRUE, 2) # numeric class(y) ## [1] &quot;numeric&quot; y &lt;- c(&quot;a&quot;, TRUE) # character class(y) ## [1] &quot;character&quot; Vektör farklı yapıda gözlemler için verimli kullanılamıyor olabilir ancak bu işlemi gerçekleştirebilen list komutu mevcuttur. İlerleyen başlıklarda bu komut detaylandırılacaktır. Kodlama yaparken sıklıkla kullanılan bir işlem türü de vektör yapısının değiştirilmesidir. Vektör içeriğinin aynı yapıda olması kuralına sadık kalarak tüm vektör içeriği farklı bir yapıya aktarılabilir. Burada as.numeric, as.logical gibi komutlardan faydalanılır. x &lt;- 0:6 class(x) ## [1] &quot;integer&quot; x vektörünün integer yapıda olduğunu gördükten sonra as.character komutu ile yeni x vektörünü numeric olarak tanımlayabiliriz. x&lt;-as.character(x) x; class(x) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; ## [1] &quot;character&quot; Bazı durumlarda R dönüşüm için çözüm üretemez ve NA çıktı verir. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) as.numeric(x) ## Warning: NAs introduced by coercion ## [1] NA NA NA R, eksik gözlemleri NA (non available) olarak tanımlar. İmkansız değerleri ise NaN (not a number) (örn: 0/0) olarak tanımlar. Gözlemleri sıralamak için sort() komutu kullanılır. sort() kodu default olarak küçükten büyüğe sıralama yapar, sıralama yönünü değiştirmek decreasing ile gerçekleştirilir. y &lt;- c(4,2,0,9,5,3,10) sort(y) ## [1] 0 2 3 4 5 9 10 sort(y, decreasing=TRUE) # büyükten küçüğe sıralama ## [1] 10 9 5 4 3 2 0 5.4 Matrisler (Matrices) Matrisler, boyut niteliğine sahip vektörlerdir. Matris yapısında satır (row) ve sütun (column) tanımlanması gündeme gelmektedir. m içeriği boş bir matris olmak üzere; m &lt;- matrix(nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA Matris boyutu dim() komutu ile sorgulanır. dim(m) ## [1] 2 3 Matris yapısında gözlemler sütun şeklinde sıralanır. m &lt;- matrix(1:6, nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Vektörler parçalanarak da matris yapısı oluşturabilirler. m &lt;- 1:10 ;m ## [1] 1 2 3 4 5 6 7 8 9 10 dim(m) &lt;- c(2, 5) ;m ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 3 5 7 9 ## [2,] 2 4 6 8 10 Matrisler, satır veya sütunların birleştirilmesi yoluyla da oluşturulabilir. Satıların bir araya getirilmesi için rbind komutu kullanılırken, sütunların bir araya getirilmesi için cbind komutu kullanılmaktadır. x &lt;- 1:3 y &lt;- 10:12 cbind(x, y) ## x y ## [1,] 1 10 ## [2,] 2 11 ## [3,] 3 12 rbind(x, y) ## [,1] [,2] [,3] ## x 1 2 3 ## y 10 11 12 5.5 Listeler ve Data Frameler (Lists and Data Frames) 5.6 Nümerik Olmayan Değerler (Non-Numeric Values) 5.6.1 Mantık İşlemleri 5.6.2 Karakterler 5.6.3 Faktörler (Factors) 5.7 Eksik Gözlemler (Missing Values) Referans "]]
