[["temel-nesneler.html", "Bölüm5 Temel Nesneler 5.1 Aritmetik (Arithmetic) 5.2 Nesneleri Tanımlama (Assigning Objects) 5.3 Vektörler (Vectors) 5.4 Matrisler (Matrices) ve Diziler (Arrays) 5.5 Listeler ve Data Frameler (Lists and Data Frames) 5.6 Sayısal Olmayan Değerler (Non-Numeric Values) 5.7 Eksik Gözlemler (Missing Values)", " Bölüm5 Temel Nesneler Bu bölümde kodlama için ihtiyaç duyacağınız temel yapılar açıklanacak ve uygulamalar ile desteklenecektir. Farklı uygulamalar ders esnasında eş zamanlı yapılacağından lütfen online dersleri takip ediniz. 5.1 Aritmetik (Arithmetic) R, en basit haliyle hesap makinesi olarak kullanılabilir. Toplama +, çıkarma -, çarpma *, bölme / operatörleri ile gerçekleştirilir. 5+4 ## [1] 9 Birden fazla matematiksel işlem aynı satırda gerçekleştirilebilir. 3+4; 6*4; 10-2 ## [1] 7 ## [1] 24 ## [1] 8 İşlemler parantez yardımıyla önceliğine göre yazılabilir, yazılmadığı taktirde matematiksel işlem önceliği geçerlidir. 10*2-3 ## [1] 17 İşlem devam edecek biçimde tanımlanırsa console + simgesi ile devam edecek ve işlem tamamlanana kadar yeni işleme geçmenize engel olacaktır. İşlemi tamamlamalı veya yeni işleme geçmek için esc tuşunu kullanmalısınız. 10+20+30+ 40 ## [1] 100 Yapılan işlemler sonucu elde edilen çok büyük veya çok küçük sonuçlar için output exponent olarak verilir. 12000*3000 ## [1] 3.6e+07 1.3e2 (130 anlamına gelir. e2: ondalık noktasını iki basamak sağa taşı) 1.4e-1 (0.14 anlamına gelir. e-1: ondalık noktasını bir basamak sola taşı) Uygulamada elde edilen sonucun integer (tamsayı) olması gerekebilir. Bu noktada elde edilen output üste, alta veya 0.5 üzeri ya da altı olma durumuna göre farklı komutlar yardımı ile yuvarlanabilir. floor: alta yuvarla floor(5.2); floor(5.7) ## [1] 5 ## [1] 5 ceilign: üste yuvarla ceiling(3.2); ceiling(3.8) ## [1] 4 ## [1] 4 round: 0.5 üzeri ise üste, 0.5 altı ise alta yuvarla round(5.6); round(5.3) ## [1] 6 ## [1] 5 Negatif sayılarda komutların nasıl işlediğini inceleyebilirsiniz. round komutu ile virgülden sonra kaç basamak olması gerektiğini belirterek yuvarlama işlemi yapabilirsiniz. round(1.248,2) ## [1] 1.25 Kullanılabilecek matematiksel fonksiyonlara örnek olarak (Crawley 2012) 5.2 Nesneleri Tanımlama (Assigning Objects) Temel işlevlerden bir diğeri kullanılacak değişkenlerin tanımlanmasıdır. Değişken için seçilecek isim mümkün olan en kısa haliyle tanımlanarak kavram kargaşası önlenmelidir. R, büyük ve küçük harfe duyarlıdır, dolayısıyla tanımlanan \\(B\\) ve \\(b\\) iki farklı değişkeni temsil eder. Değişken ismi iki veya daha fazla kelimeden oluşacaksa kelimeler arasında boşluk yerine nokta kullanılmalıdır. (neura link) Değişken ismi sayı veya sembol ile başlayamaz. (1a, &amp;b) Değişken tanımlama işlemi &lt;- operatörü ile gerçekleştirilir. Tanımlanan değişken adı ile çağrılmazsa veya print komutu kullanılmazsa çıktı yazdırılmaz. x&lt;-3 print(x) ## [1] 3 Sayısal olmayan değer tanımlamaları tırnak içerisinde yapılmalıdır. msg&lt;- &quot;hello world&quot; Tanımlanan değişken veya fonksiyon ile ilgili notlar # ile tanımlanır. x.ort&lt;-20 # ortalama değer Çıktıda basılan [.] kaçıncı gözlemden devam edildiğini gösterir. Örneğin 30 gözleminin [26] ifadesinin yardımı ile 26. gözlem olduğunu kolaylıkla söyleyebiliriz. [.] ifadeleri asıl seride yer almaz, yalnızca yol gösterici olarak çıktıda gözlenir. x&lt;-5:50 x ## [1] 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ## [26] 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 5.3 Vektörler (Vectors) Vektör oluşturmak için c() operatör kullanılmaktadır. Vektörler numeric character logical integer complex yapıları içerebilir. Vektörler yalnızca aynı yapıda gözlemler içerebilir. x &lt;- c(0.5, 0.6) # numeric x &lt;- c(TRUE, FALSE) # logical x &lt;- c(T, F) # logical x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # character x &lt;- 9:29 # integer x &lt;- c(1+0i, 2+4i) # complex T ve F, TRUE ve FALSE’a karşılık kullanılan kısaltma yapılardır. x &lt;- c(T, F) # logical x ## [1] TRUE FALSE Aynı zamanda vector komutu ile de vektör oluşturabilirsiniz. Vektörü tanımlarken belirlenen içerik yapısına göre oluşturulur. x &lt;- vector(&quot;numeric&quot;, length = 7) x ## [1] 0 0 0 0 0 0 0 Complex elemanları içerecek bir vektör oluşturmak istendiğinde; x &lt;- vector(&quot;complex&quot;, length = 7) x ## [1] 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i Aynı değişken adı birden fazla tanımlamada kullanılırsa yapılan son tanımlama geçerli olacaktır. Kod yazarken kullandığınız değişken isimlerine ve doğru yazıma dikkat ediniz. Vektör uzunluğu length() komutu ile sorgulanır. x&lt;-c(1:68) length(x) ## [1] 68 Vektör aynı yapıda gözlemlerden oluşmuyorsa? Bu durumda tüm gözlemler tek bir yapı olarak algılanır. Herhangi bir değişkenin hangi yapıda gözlem içerdiği class() komutu ile sorgulanabilir. y &lt;- c(1.7, &quot;a&quot;) # character class(y) ## [1] &quot;character&quot; y &lt;- c(TRUE, 2) # numeric class(y) ## [1] &quot;numeric&quot; y &lt;- c(&quot;a&quot;, TRUE) # character class(y) ## [1] &quot;character&quot; Vektör farklı yapıda gözlemler için verimli kullanılamıyor olabilir ancak bu işlemi gerçekleştirebilen list komutu mevcuttur. İlerleyen başlıklarda bu komut detaylandırılacaktır. Kodlama yaparken sıklıkla kullanılan bir işlem türü de vektör yapısının değiştirilmesidir. Vektör içeriğinin aynı yapıda olması kuralına sadık kalarak tüm vektör içeriği farklı bir yapıya aktarılabilir. Burada as.numeric, as.logical gibi komutlardan faydalanılır. x &lt;- 0:6 class(x) ## [1] &quot;integer&quot; x vektörünün integer yapıda olduğunu gördükten sonra as.character komutu ile yeni x vektörünü character olarak tanımlayabiliriz. x&lt;-as.character(x) x; class(x) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; ## [1] &quot;character&quot; Bazı durumlarda R dönüşüm için çözüm üretemez ve NA çıktı verir. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) as.numeric(x) ## Warning: NAs introduced by coercion ## [1] NA NA NA R, eksik gözlemleri NA (non available) olarak tanımlar. İmkansız değerleri ise NaN (not a number) olarak tanımlar. Sık kullanılan komutlardan bir diğeri seq(), bu fonksiyon sayesinde istediğiniz aralıkta ve artış seviyesinde vektör üretebilirsiniz. x&lt;-1:20 #1&#39;den 20&#39;ye 1&#39;er artan seri x ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 x&lt;-seq(from=5,to=20,by=5) #5&#39;den 20&#39;ye 5&#39;er artan seri x ## [1] 5 10 15 20 Serinin bitiş noktasını belirtmeden de tanımlama yapmak mümkündür, bu durumda serinin uzunluğunun ne olduğun fonksiyonda belirtilmelidir. x&lt;-seq(from=0.04,by=0.01,length=11) x ## [1] 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 Gözlemleri sıralamak için sort() komutu kullanılır. sort() kodu default olarak küçükten büyüğe sıralama yapar, sıralama yönünü değiştirme işlemi decreasing ile gerçekleştirilir. y &lt;- c(4,2,0,9,5,3,10) sort(y) ## [1] 0 2 3 4 5 9 10 sort(y, decreasing=TRUE) # büyükten küçüğe sıralama ## [1] 10 9 5 4 3 2 0 Tekrarlı oralarak işlem yapmak için kullanılan fonksiyon rep() şeklinde tanımlanmaktadır. rep(y,times=3) ## [1] 4 2 0 9 5 3 10 4 2 0 9 5 3 10 4 2 0 9 5 3 10 Vektörler için kullanışlı fonksiyonlardan bazıları aşağıdaki listede sizlerle paylaşılmıştır (Crawley 2012). 5.4 Matrisler (Matrices) ve Diziler (Arrays) Matrisler, boyut niteliğine sahip vektörlerdir. Matris yapısında satır (row) ve sütun (column) (\\(r*c\\)) olmak üzere iki boyut mevcuttur. Matris içeriği de vektörde olduğu gibi tek tip yapıdan oluşmalıdır. m içeriği boş bir matris olmak üzere; m &lt;- matrix(nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA Matris boyutu dim() komutu ile sorgulanır. dim(m) ## [1] 2 3 Matris yapısında gözlemler sütun şeklinde sıralanır. m &lt;- matrix(1:6, nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Elemanların satırdan devam ettiği matris üretmek isteniyorsa byrow=TRUE bilgisi eklenmelidir. n&lt;-matrix(1:6,2,3,byrow = TRUE); n ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 Vektörler parçalanarak da matris yapısı oluşturabilirler. m &lt;- 1:10 ;m ## [1] 1 2 3 4 5 6 7 8 9 10 dim(m) &lt;- c(2, 5) ;m ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 3 5 7 9 ## [2,] 2 4 6 8 10 Matrisler, satır veya sütunların birleştirilmesi yoluyla da oluşturulabilir. Satıların bir araya getirilmesi için rbind komutu kullanılırken, sütunların bir araya getirilmesi için cbind komutu kullanılmaktadır. x &lt;- 1:3 y &lt;- 10:12 cbind(x, y) ## x y ## [1,] 1 10 ## [2,] 2 11 ## [3,] 3 12 rbind(x, y) ## [,1] [,2] [,3] ## x 1 2 3 ## y 10 11 12 [,4] anlamı ilgili değişkenin 4. sütunu tüm satırları [2,] anlamı ilgili değişkenin 2. satırı tüm sütunları Mevcut yapıyı sorgulamak ve değiştirmek de mümkündür. x&lt;-c(1,2,3,4,5,6,7,8,9);x ## [1] 1 2 3 4 5 6 7 8 9 is.vector(x) ## [1] TRUE y&lt;-as.matrix(x);y ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 ## [5,] 5 ## [6,] 6 ## [7,] 7 ## [8,] 8 ## [9,] 9 class(y) ## [1] &quot;matrix&quot; &quot;array&quot; Matrisin transpozu t() fonksiyonu ile alınır. m1&lt;-matrix(c(1:8),4,2);m1 ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 t(m1) ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 Matrislerde satır ve sütunlar için isim tanımlama işlemi satır veya sütun tanımlamasına bağlı olarak sırasıyla rownames() ve colnames() fonksiyonları ile gerçekleştirilir. rownames(m1)&lt;-c(&quot;x1&quot;,&quot;x2&quot;,&quot;x3&quot;,&quot;x4&quot;) colnames(m1)&lt;-c(&quot;y1&quot;,&quot;y2&quot;); m1 ## y1 y2 ## x1 1 5 ## x2 2 6 ## x3 3 7 ## x4 4 8 Matrislerde işlem kolaylığı sağlamak adına bazı fonksiyonlar tanımlanmıştır. Satır toplam veya ortalama, sütun toplam veya ortalama işlemleri için tanımlı fonksiyonlar aşağıda yer almaktadır. rowSums(): satır toplam colSums(): sütun toplam rowMeans(): satır ortalama colMeans(): sütun ortalama rowSums(m1) ## x1 x2 x3 x4 ## 6 8 10 12 colMeans(m1) ## y1 y2 ## 2.5 6.5 Matrislerde çarpma işlemi %*% operatörü ile gerçekleştirilir. c1&lt;-matrix(c(1,2,3,4),2,2) c2&lt;-matrix(c(1,3,1,2),2,2); c1; c2 ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## [,1] [,2] ## [1,] 1 1 ## [2,] 3 2 c1*c2 ## [,1] [,2] ## [1,] 1 3 ## [2,] 6 8 c1%*%c2 ## [,1] [,2] ## [1,] 10 7 ## [2,] 14 10 Herhangi bir matrisin tersini alma işlemi solve() komutu ile gerçekleştirilir. Diziler matrislerdeki satır ve sütune ek olarak bir boyut (h) daha içerir. Birden fazla matrisin yer aldığı \\(r*c*h\\) boyutlu bir yapı olarak düşünülebilir. Dizi içeriği aynı tipte verilerden oluşmalıdır. array(1:12, dim = c(2, 2, 3)) ## , , 1 ## ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## , , 2 ## ## [,1] [,2] ## [1,] 5 7 ## [2,] 6 8 ## ## , , 3 ## ## [,1] [,2] ## [1,] 9 11 ## [2,] 10 12 5.5 Listeler ve Data Frameler (Lists and Data Frames) Listeler vektörlerin özel bir halidir. Vektörler içeriğinde aynı yapıda eleman bulundurma koşuluna sahipken, listeler için böyle bir koşul yoktur. Özetle, listeler farklı yapıda ve boyutta veri tiplerini içerebilir. Liste oluşturmak için ihtiyaç duyulacak fonksiyon list()dir. x &lt;- list(c(1,2,3), &quot;istatistik&quot;, TRUE, 1 + 4i);x ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;istatistik&quot; ## ## [[3]] ## [1] TRUE ## ## [[4]] ## [1] 1+4i Boş bir liste oluşturmak için vector() fonksiyonundan faydalanabilirsiniz. x &lt;- vector(&quot;list&quot;, length = 3);x ## [[1]] ## NULL ## ## [[2]] ## NULL ## ## [[3]] ## NULL Data frameler de iki boyutlu yapılardır. Sütun içerisinde veri tipi aynı olmalıdır ancak sütunlar arası veri tipi farklılık gösterebilir. Regresyon ve farklı istatistiksel hesaplamalarda data frameler sıklıkla kullanılır. Aynı zamanda as.data.frame() fonksiyonu yardımıyla matrisler data framelere dönüştürülebilir. Data frame yapısında yer alan değişkenlerin boyutlarının aynı büyüklükte olması gereklidir. x&lt;-data.frame(Gün=c(&quot;Pzts&quot;,&quot;Salı&quot;,&quot;Çarş&quot;,&quot;Perş&quot;, &quot;Cuma&quot;), Vaka=c(1000,1110,1125,1153,1196));x ## Gün Vaka ## 1 Pzts 1000 ## 2 Salı 1110 ## 3 Çarş 1125 ## 4 Perş 1153 ## 5 Cuma 1196 data olarak isimlendirilen data frame yapısındaki veri ile ilgili farklı seçim işlemleri aşağıdaki tabloda belirtilmiştir. 5.6 Sayısal Olmayan Değerler (Non-Numeric Values) Programlama yaparken sayısal verilerin yanında sayısal olmayan veri tipleri de kullanılmaktadır. Sayısal olmayan veri tipleri; Mantık (logical) Karakter (character) Faktör (factor) olmak üzere üç başlık altında toplanmaktadır. 5.6.1 Mantıksal Değerler Mantıksal değerler TRUE veya FALSE olarak tanımlanabilir. Mantıksal değerler fonksiyonların içinde de sıklıkla kullanılmaktadır. Örneğin sort fonksiyonunda sıralamanın artan veya azalan olmasını belirleyen decreasing=FALSE, ya da matriste eleman dizilimini belirleyen byrow=TRUE gibi. TRUE ve FALSE kısaltması olarak T ve F de kullanılabilir. p&lt;-c(T,F,T,T,T,F,T,F);p ## [1] TRUE FALSE TRUE TRUE TRUE FALSE TRUE FALSE Operatör Anlamı == Eşittir != Eşit değildir &gt; Büyüktür &lt; Küçüktür &gt;= Büyük eşittir &lt;= Küçük eşittir 1==2 ## [1] FALSE 1&gt;2 ## [1] FALSE 1!=(2+5) ## [1] TRUE h&lt;-c(3,2,1,4,1,2,1,-1,0,3) m&lt;-c(4,1,2,1,1,0,0,3,0,4) length(h)==length(m) ## [1] TRUE h==m ## [1] FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE İki mantıksal değeri karşılaştırmak için kullanılan operatörler ve sonuçlar x&lt;-c(T,F,F,T) y&lt;-c(F,F,T,T) x&amp;y ## [1] FALSE FALSE FALSE TRUE x&amp;&amp;y ## [1] FALSE x|y ## [1] TRUE FALSE TRUE TRUE x||y ## [1] TRUE Mantıksal değerler ikili yapıları gereği 1 TRUE ve 0 FALSE olarak tanımlanır. TRUE+TRUE ## [1] 2 T+T+F+T+T+T+F ## [1] 5 1&amp;&amp;1 ## [1] TRUE 1||0 ## [1] TRUE Benzer mantık işlemleri karakter veriler için de uygulanabilir. &quot;alpha&quot;==&quot;alpha&quot; ## [1] TRUE &quot;alpha&quot;!=&quot;beta&quot; ## [1] TRUE 5.6.2 Karakterler 5.6.3 Faktörler (Factors) 5.7 Eksik Gözlemler (Missing Values) Referans "]]
