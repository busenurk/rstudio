[["index.html", "R Ders Notları Bölüm1 Ön Bilgi 1.1 Hakkımda", " R Ders Notları Dr. Busenur Kızılaslan 2021-01-04 Bölüm1 Ön Bilgi R ders notları temelde BSP2043 - Bilgisayar III ve BSP2044 - Bilgisayar IV derslerine kaynaklık etmesi amacıyla tasarlanmış olup konu çerçevesinde kendisini geliştirmek isteyen herkesin faydalanabilmesi hedeflenmiştir. Kaynak, temel matematik ve ingilizce bilgisine sahip olan herkesin anlayıp uygulayabileceği basitlikte bir anlatıma sahiptir. Ders dili Türkçe’dir. Bu bakımdan genel anlatımda Türkçe kullanılacaktır. Literatürü rahat takip edebilmeniz, komut karmaşası yaşamamanız ve araştırma sürecinde zengin forum imkanından yararlanabilmeniz adına temel terimler orijinal haliyle kullanılacaktır. Aynı zamanda referans verilen kaynaklar da orijinal dili ile paylaşılacaktır. Bu nedenle İngilizce eksikliğinizi gidermeniz önerilir. Kaynaklar; Kitaplar The R Book - Michael J. Crawley R for Data Science - Hadley Wickham, Garrett Grolemund Introduction to Data Science - Rafael A. Irizarry R Programming for Data Science - Roger D. Peng The Book of R - Tilman M. Davies Eğitimler HarvardX - Data Science: R Basics HarvardX - Data Science: Visualization HarvardX - Data Science: Probability Katkı ve öneriler için: busenur.sarica@marmara.edu.tr İyi eğlenceler! 1.1 Hakkımda 2012 yılında Mimar Sinan G. S. Üniversitesi istatistik bölümünde lisans öğrenimimi tamamlamamın ardından 2014 yılı itibariyle Marmara Üniversitesi istatistik bölümünde araştırma görevlisi olarak göreve başladım. Eş zamanlı olarak başladığım yüksek lisans öğrenimimi yine Mimar Sinan G. S. Üniversitesi istatistik anabilim dalında tamamlarken artık çalışma alanım bulanık mantık (fuzzy logic) olarak şekillenmişti. Bir buçuk yılda tamamladığım yüksek lisansın ardından farklı bakış açısı kazanma fikriyle yönümü Yıldız Teknik Üniversitesi’ne çevirdim. 2015 yılında istatistik bölümünde başladığım doktora öğrenimimi 2020 yılında yine bulanık mantık ile öngörü üzerine hazırladığım tezim ile tamamladım. Doktora öğrenimim sırasında İstanbul Teknik Üniversitesi endüstri mühendisliği bölümünden de çeşitli dersler alarak alanında uzman hocaların1 bilgilerinden faydalanma imkanı buldum. Akademik kariyer hedefiyle başlamadığım öğrenim yaşamımda ufku açık, aydınlık ve birikimli hocalarım yolumu bulmama yardımcı olmuştur. 2018 yılında Polonya’da gerçekleşen International Conference on Trends and Perspectives in Linear Statistical Inference (LinStat’2018) kapsamında sunduğum, doktora tezimin bir kısmından oluşan çalışma ile aldığım Young Scientists Awards ikincilik ödülü de yanlış yolda olmadığımı göstermiştir. Üzerimde emeği olan herkese teşekkürlerimle! CV, Google Scholar, Linkedin Prof. Dr. Cengiz Kahraman↩︎ "],["motivasyon.html", "Bölüm2 Motivasyon", " Bölüm2 Motivasyon ‘Bu dersi neden alıyorum?’ sorusuna karşılık olarak alacağınız cevap ‘ilerleyen dönemlerde göreceğiniz derslerin uygulamalarında ihtiyaç duyacaksınız’dan çok daha fazlası! Herhangi bir programlama diline hakim olmak veriyi anlamlandırabilmek adına zaten önemliyken özellikle R, Python gibi açık kaynak ve hızla gelişmeye devam eden programlama dillerini biliyor olmak sizleri donanımlı kılacaktır. Programlama bilgisine sahip olmak iş yaşamındaki ihtiyacınızı karşılamasının yanı sıra günlük yaşamdaki problem çözme yeteneğinizin gelişmesine de yardımcı olmaktadır. Programlama yapısını öğrenen kişinin diğer programlama dillerini öğrenmesi kolaylaşmaktadır. İş başvurularında birden fazla programlama dili biliyor olmanın sizi öne çıkaracağı da aşikar. Burada sorulması gereken asıl soru ‘hangi programlama dilini/dillerini öğrenmeliyim?’ olmalıdır. Ders kapsamında R programlama dili ve özellikleri açıklanacaktır. "],["genel-bakış.html", "Bölüm3 Genel Bakış 3.1 R: Nedir? 3.2 R: Neden? 3.3 R: Help 3.4 Paketler", " Bölüm3 Genel Bakış 3.1 R: Nedir? İstatistiksel analiz ve veri görselleştirme amacıyla geliştirilen R, açık kaynak olup ücretsizdir. R, dizayn olarak var olan iki dilden etkilenmiştir; Becker, Chambers &amp; Wilks’in S programlama dili ve Sussman’ın Scheme programlama dilidir. R, başlangıçta Yeni Zelanda Auckland’daki Auckland Üniversitesi İstatistik Bölümü’nde Ross Ihaka ve Robert Gentleman tarafından yazılmıştır. Ek olarak, büyük bir grup insan, kod ve hata raporları göndererek katkıda bulunmuştur. Tarihçeyi merak edenler A Brief History of S (Becker 2004) kaynağını inceleyebilir. 1997 ortalarından itibaren çekirdek bir yapı (The R Core Team) yönetimi sürdürmektedir. Resmi internet adresi Yükleme adresi The R Journal: R kullanıcıları için hakemli ve açık erişimli dergi Kitaplar: R kullancıları için çeşitli alanlarda/dillerde kaynak kitaplar Faydalı adres1 Faydalı adres2 Hangi komutun ne işe yaradığını anımsayamıyorsanız veya bir hata ile karşılaştıysanız GOOGLE kullanın. Programlama öğrenmenin en iyi yolu denemek ve hata yapmaktır. 3.1.1 RStudio R üzerinde doğrudan çalışabilir veya bir grafik ara yüzü olan RStudio’nun zengin özelliklerinden faydalanma imkanından yararlanabilirsiniz. Uygulama kolaylığı sağlayan bir entegre geliştirme ortamı (integrated development environment (IDE)) olan RStudio, Windows, Mac ve Linux ile çalışabilir. RStudio’yu kullanışlı kılan birçok özellik mevcuttur, bunlardan birkaçı şu şekilde sıralanabilir. Script Kodlama geçmişi, güçlü grafiksel altyapı Cheatsheetler Değişken ve fonksiyon tamamlama özelliği 3.2 R: Neden? Veri analizi için kullanılabilecek SAS, SPSS, Excel, MATLAB gibi birçok yazılım mevcutken neden R kullanıyoruz? Ücretsiz (open source) Geniş kullanım kitlesi Dünyada 2 milyondan fazla kullanıcıya sahip Sürekli gelişmeye devam eden yapısı Geniş forum ağı Uygulama ve kullanım kolaylığı Grafik ve görsel üretimindeki başarısı Paket kullanım imkanı Raporlama kolaylığı ve RMarkdown sayesinde kolay sunum R aynı zamanda bazı dezavantajlara da sahiptir. Güncelleneme gereksinimi Uzmanlaşmanın diğer programlara göre biraz daha zor olması 3.3 R: Help R’da karşılacağınız problemler için menüde yer alan Help kısmını kullanabilir veya Stackoverflow gibi forumlardan faydalanabilirsiniz. Windows, Mac işletim sistemleri ve genel sorular için üç farklı FAQ (Frequently Asked Questions) kısmı mevcuttur. Kullanacağınız fonksiyonun ismini biliyorsanız ? kullanarak yine help içeriğinden faydalanabilirsiniz. ?sum Kullanacağınız fonksiyonun ismini biliyor fakat hangi pakette yer aldığını bilmiyorsanız bu noktada find komutu size yardımcı olacaktır. find(&quot;sum&quot;) ## [1] &quot;package:base&quot; Kullanacağınız fonksiyon ile ilgili örnek araştırmak isterseniz example komutu işinizi görecektir. example(sum) ## ## sum&gt; ## Pass a vector to sum, and it will add the elements together. ## sum&gt; sum(1:5) ## [1] 15 ## ## sum&gt; ## Pass several numbers to sum, and it also adds the elements. ## sum&gt; sum(1, 2, 3, 4, 5) ## [1] 15 ## ## sum&gt; ## In fact, you can pass vectors into several arguments, and everything gets added. ## sum&gt; sum(1:2, 3:5) ## [1] 15 ## ## sum&gt; ## If there are missing values, the sum is unknown, i.e., also missing, .... ## sum&gt; sum(1:5, NA) ## [1] NA ## ## sum&gt; ## ... unless we exclude missing values explicitly: ## sum&gt; sum(1:5, NA, na.rm = TRUE) ## [1] 15 3.4 Paketler R programlama dili ile kendi döngülerinizi oluşturabilir, özgün kodlarınızı yazabilirsiniz, aynı zamanda paketler yardımı ile yazılmış olan zengin hazır kod içeriğinden de faydalanabilirsiniz (internet bağlantısı gerektirir). Bu zengin içeriğe hazırladığınız paketler ile dahil olma imkanınız da mevcut. Paket indirme konusunda problem yaşıyorsanız R’ı yönetici olarak çalıştırmayı deneyin. Paket yükleme işleminin hızlı olabilmesi için size en yakın mirror seçimini yapmalısınız. Paketler kullanım kolaylığı ve zamandan kazanç sağlamakla birlikte kullanılmadan önce içeriğin dikkatlice incelenmesi önemlidir. Tanımlamaları iyi anlaşılmadan kullanılan paketlerle yanlış sonuçlar elde edilmesi kaçınılmazdır. Referans "],["yükleme-ve-tanışma.html", "Bölüm4 Yükleme ve Tanışma 4.1 Yükleme 4.2 Tanışma", " Bölüm4 Yükleme ve Tanışma 4.1 Yükleme R’ın güncel versiyonun indirilmesi için CRAN (The Comprehensive R Archive Network) sayfası ziyaret edilmelidir. Bilgisayarınızdaki mevcut işletim sistemi için uygun olan versiyon indirilmelidir. Uygun işletim sistemi seçildikten sonra install R for the first time tıklanarak temel versiyon seçilmelidir. Gelen ekranda seçtiğiniz işletim sistemine uygun olan güncel R versiyonu görülecektir. Download işlemi başlatılır ve uygun seçenekler dahilinde indirme işlemi ve kurulum tamamlanır. R yükleme işlemi tamamlandıktan sonra RStudio kurulum işlemine başlanır. RStudio sayfasına gidilir, bilgisayarınızdaki işletim sistemine uygun olan RStudio Desktop versiyonu indirilir ve kurulur. Yükleme destek videosu (R-Windows) Yükleme destek videosu (R-Mac) Yükleme destek videosu (RStudio) 4.2 Tanışma R programlama dilini kullanmak için console erişimi yeterlidir. Console yalın haliyle kullanılabildiği gibi RStudio aracılığı ile de kullanılabilir. RStudio editor, görsel ve uygulama avantajları sayesinde uygulama kolaylığı sağlamaktadır. R kullanarak yaptığınız çalışmalarda lütfen referans vermeyi unutmayınız. citation() ## ## To cite R in publications use: ## ## R Core Team (2020). R: A language and environment for statistical ## computing. R Foundation for Statistical Computing, Vienna, Austria. ## URL https://www.R-project.org/. ## ## A BibTeX entry for LaTeX users is ## ## @Manual{, ## title = {R: A Language and Environment for Statistical Computing}, ## author = {{R Core Team}}, ## organization = {R Foundation for Statistical Computing}, ## address = {Vienna, Austria}, ## year = {2020}, ## url = {https://www.R-project.org/}, ## } ## ## We have invested a lot of time and effort in creating R, please cite it ## when using it for data analysis. See also &#39;citation(&quot;pkgname&quot;)&#39; for ## citing R packages. Yeni script oluşturmak için; RStudio cheatsheat yapısı sayesinde bir çok konu başlığında özet bilgiye ulaşmak mümkün. "],["temel-nesneler.html", "Bölüm5 Temel Nesneler 5.1 Aritmetik (Arithmetic) 5.2 Nesneleri Tanımlama (Assigning Objects) 5.3 Vektörler (Vectors) 5.4 Matrisler (Matrices) ve Diziler (Arrays) 5.5 Listeler ve Data Frameler (Lists and Data Frames) 5.6 Sayısal Olmayan Değerler (Non-Numeric Values) 5.7 Eksik Gözlemler (Missing Values)", " Bölüm5 Temel Nesneler Bu bölümde kodlama için ihtiyaç duyacağınız temel yapılar açıklanacak ve uygulamalar ile desteklenecektir. Farklı uygulamalar ders esnasında eş zamanlı yapılacağından lütfen online dersleri takip ediniz. 5.1 Aritmetik (Arithmetic) R, en basit haliyle hesap makinesi olarak kullanılabilir. Toplama +, çıkarma -, çarpma *, bölme / operatörleri ile gerçekleştirilir. 5+4 ## [1] 9 Birden fazla matematiksel işlem aynı satırda gerçekleştirilebilir. 3+4; 6*4; 10-2 ## [1] 7 ## [1] 24 ## [1] 8 İşlemler parantez yardımıyla önceliğine göre yazılabilir, yazılmadığı taktirde matematiksel işlem önceliği geçerlidir. 10*2-3 ## [1] 17 İşlem devam edecek biçimde tanımlanırsa console + simgesi ile devam edecek ve işlem tamamlanana kadar yeni işleme geçmenize engel olacaktır. İşlemi tamamlamalı veya yeni işleme geçmek için esc tuşunu kullanmalısınız. 10+20+30+ 40 ## [1] 100 Yapılan işlemler sonucu elde edilen çok büyük veya çok küçük sonuçlar için output exponent olarak verilir. 12000*3000 ## [1] 3.6e+07 1.3e2 (130 anlamına gelir. e2: ondalık noktasını iki basamak sağa taşı) 1.4e-1 (0.14 anlamına gelir. e-1: ondalık noktasını bir basamak sola taşı) Uygulamada elde edilen sonucun integer (tamsayı) olması gerekebilir. Bu noktada elde edilen output üste, alta veya 0.5 üzeri ya da altı olma durumuna göre farklı komutlar yardımı ile yuvarlanabilir. floor: alta yuvarla floor(5.2); floor(5.7) ## [1] 5 ## [1] 5 ceilign: üste yuvarla ceiling(3.2); ceiling(3.8) ## [1] 4 ## [1] 4 round: 0.5 üzeri ise üste, 0.5 altı ise alta yuvarla round(5.6); round(5.3) ## [1] 6 ## [1] 5 Negatif sayılarda komutların nasıl işlediğini inceleyebilirsiniz. round komutu ile virgülden sonra kaç basamak olması gerektiğini belirterek yuvarlama işlemi yapabilirsiniz. round(1.248,2) ## [1] 1.25 Kullanılabilecek matematiksel fonksiyonlara örnek olarak (Crawley 2012) 5.2 Nesneleri Tanımlama (Assigning Objects) Temel işlevlerden bir diğeri kullanılacak değişkenlerin tanımlanmasıdır. Değişken için seçilecek isim mümkün olan en kısa haliyle tanımlanarak kavram kargaşası önlenmelidir. R, büyük ve küçük harfe duyarlıdır, dolayısıyla tanımlanan \\(B\\) ve \\(b\\) iki farklı değişkeni temsil eder. Değişken ismi iki veya daha fazla kelimeden oluşacaksa kelimeler arasında boşluk yerine nokta kullanılmalıdır. (neura link) Değişken ismi sayı veya sembol ile başlayamaz. (1a, &amp;b) Değişken tanımlama işlemi &lt;- operatörü ile gerçekleştirilir. Tanımlanan değişken adı ile çağrılmazsa veya print komutu kullanılmazsa çıktı yazdırılmaz. x&lt;-3 print(x) ## [1] 3 Sayısal olmayan değer tanımlamaları tırnak içerisinde yapılmalıdır. msg&lt;- &quot;hello world&quot; Tanımlanan değişken veya fonksiyon ile ilgili notlar # ile tanımlanır. x.ort&lt;-20 # ortalama değer Çıktıda basılan [.] kaçıncı gözlemden devam edildiğini gösterir. Örneğin 30 gözleminin [26] ifadesinin yardımı ile 26. gözlem olduğunu kolaylıkla söyleyebiliriz. [.] ifadeleri asıl seride yer almaz, yalnızca yol gösterici olarak çıktıda gözlenir. x&lt;-5:50 x ## [1] 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ## [26] 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 5.3 Vektörler (Vectors) Vektör oluşturmak için c() operatör kullanılmaktadır. Vektörler numeric character logical integer complex yapıları içerebilir. Vektörler yalnızca aynı yapıda gözlemler içerebilir. x &lt;- c(0.5, 0.6) # numeric x &lt;- c(TRUE, FALSE) # logical x &lt;- c(T, F) # logical x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # character x &lt;- 9:29 # integer x &lt;- c(1+0i, 2+4i) # complex T ve F, TRUE ve FALSE’a karşılık kullanılan kısaltma yapılardır. x &lt;- c(T, F) # logical x ## [1] TRUE FALSE Aynı zamanda vector komutu ile de vektör oluşturabilirsiniz. Vektörü tanımlarken belirlenen içerik yapısına göre oluşturulur. x &lt;- vector(&quot;numeric&quot;, length = 7) x ## [1] 0 0 0 0 0 0 0 Complex elemanları içerecek bir vektör oluşturmak istendiğinde; x &lt;- vector(&quot;complex&quot;, length = 7) x ## [1] 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i 0+0i Aynı değişken adı birden fazla tanımlamada kullanılırsa yapılan son tanımlama geçerli olacaktır. Kod yazarken kullandığınız değişken isimlerine ve doğru yazıma dikkat ediniz. Vektör uzunluğu length() komutu ile sorgulanır. x&lt;-c(1:68) length(x) ## [1] 68 Vektör aynı yapıda gözlemlerden oluşmuyorsa? Bu durumda tüm gözlemler tek bir yapı olarak algılanır. Herhangi bir değişkenin hangi yapıda gözlem içerdiği class() komutu ile sorgulanabilir. y &lt;- c(1.7, &quot;a&quot;) # character class(y) ## [1] &quot;character&quot; y &lt;- c(TRUE, 2) # numeric class(y) ## [1] &quot;numeric&quot; y &lt;- c(&quot;a&quot;, TRUE) # character class(y) ## [1] &quot;character&quot; Vektör farklı yapıda gözlemler için verimli kullanılamıyor olabilir ancak bu işlemi gerçekleştirebilen list komutu mevcuttur. İlerleyen başlıklarda bu komut detaylandırılacaktır. Kodlama yaparken sıklıkla kullanılan bir işlem türü de vektör yapısının değiştirilmesidir. Vektör içeriğinin aynı yapıda olması kuralına sadık kalarak tüm vektör içeriği farklı bir yapıya aktarılabilir. Burada as.numeric, as.logical gibi komutlardan faydalanılır. x &lt;- 0:6 class(x) ## [1] &quot;integer&quot; x vektörünün integer yapıda olduğunu gördükten sonra as.character komutu ile yeni x vektörünü character olarak tanımlayabiliriz. x&lt;-as.character(x) x; class(x) ## [1] &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; ## [1] &quot;character&quot; Bazı durumlarda R dönüşüm için çözüm üretemez ve NA çıktı verir. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) as.numeric(x) ## Warning: NAs introduced by coercion ## [1] NA NA NA R, eksik gözlemleri NA (non available) olarak tanımlar. İmkansız değerleri ise NaN (not a number) olarak tanımlar. Sık kullanılan komutlardan bir diğeri seq(), bu fonksiyon sayesinde istediğiniz aralıkta ve artış seviyesinde vektör üretebilirsiniz. x&lt;-1:20 #1&#39;den 20&#39;ye 1&#39;er artan seri x ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 x&lt;-seq(from=5,to=20,by=5) #5&#39;den 20&#39;ye 5&#39;er artan seri x ## [1] 5 10 15 20 Serinin bitiş noktasını belirtmeden de tanımlama yapmak mümkündür, bu durumda serinin uzunluğunun ne olduğun fonksiyonda belirtilmelidir. x&lt;-seq(from=0.04,by=0.01,length=11) x ## [1] 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 Gözlemleri sıralamak için sort() komutu kullanılır. sort() kodu default olarak küçükten büyüğe sıralama yapar, sıralama yönünü değiştirme işlemi decreasing ile gerçekleştirilir. y &lt;- c(4,2,0,9,5,3,10) sort(y) ## [1] 0 2 3 4 5 9 10 sort(y, decreasing=TRUE) # büyükten küçüğe sıralama ## [1] 10 9 5 4 3 2 0 Tekrarlı oralarak işlem yapmak için kullanılan fonksiyon rep() şeklinde tanımlanmaktadır. rep(y,times=3) ## [1] 4 2 0 9 5 3 10 4 2 0 9 5 3 10 4 2 0 9 5 3 10 Vektörler için kullanışlı fonksiyonlardan bazıları aşağıdaki listede sizlerle paylaşılmıştır (Crawley 2012). 5.4 Matrisler (Matrices) ve Diziler (Arrays) Matrisler, boyut niteliğine sahip vektörlerdir. Matris yapısında satır (row) ve sütun (column) (\\(r*c\\)) olmak üzere iki boyut mevcuttur. Matris içeriği de vektörde olduğu gibi tek tip yapıdan oluşmalıdır. m içeriği boş bir matris olmak üzere; m &lt;- matrix(nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] NA NA NA ## [2,] NA NA NA Matris boyutu dim() komutu ile sorgulanır. dim(m) ## [1] 2 3 Matris yapısında gözlemler sütun şeklinde sıralanır. m &lt;- matrix(1:6, nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Elemanların aynı satırdan devam ettiği matris üretmek isteniyorsa byrow=TRUE bilgisi eklenmelidir. n&lt;-matrix(1:6,2,3,byrow = TRUE); n ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 Vektörler parçalanarak da matris yapısı oluşturabilirler. m &lt;- 1:10 ;m ## [1] 1 2 3 4 5 6 7 8 9 10 dim(m) &lt;- c(2, 5) ;m ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 3 5 7 9 ## [2,] 2 4 6 8 10 Matrisler, satır veya sütunların birleştirilmesi yoluyla da oluşturulabilir. Satıların bir araya getirilmesi için rbind komutu kullanılırken, sütunların bir araya getirilmesi için cbind komutu kullanılmaktadır. x &lt;- 1:3 y &lt;- 10:12 cbind(x, y) ## x y ## [1,] 1 10 ## [2,] 2 11 ## [3,] 3 12 rbind(x, y) ## [,1] [,2] [,3] ## x 1 2 3 ## y 10 11 12 [,4] anlamı ilgili değişkenin 4. sütunu tüm satırları [2,] anlamı ilgili değişkenin 2. satırı tüm sütunları Mevcut yapıyı sorgulamak ve değiştirmek de mümkündür. x&lt;-c(1,2,3,4,5,6,7,8,9);x ## [1] 1 2 3 4 5 6 7 8 9 is.vector(x) ## [1] TRUE y&lt;-as.matrix(x);y ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 ## [5,] 5 ## [6,] 6 ## [7,] 7 ## [8,] 8 ## [9,] 9 class(y) ## [1] &quot;matrix&quot; &quot;array&quot; Matrisin transpozu t() fonksiyonu ile alınır. m1&lt;-matrix(c(1:8),4,2);m1 ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 t(m1) ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 Matrislerde satır ve sütunlar için isim tanımlama işlemi satır veya sütun tanımlamasına bağlı olarak sırasıyla rownames() ve colnames() fonksiyonları ile gerçekleştirilir. rownames(m1)&lt;-c(&quot;x1&quot;,&quot;x2&quot;,&quot;x3&quot;,&quot;x4&quot;) colnames(m1)&lt;-c(&quot;y1&quot;,&quot;y2&quot;); m1 ## y1 y2 ## x1 1 5 ## x2 2 6 ## x3 3 7 ## x4 4 8 Matrislerde işlem kolaylığı sağlamak adına bazı fonksiyonlar tanımlanmıştır. Satır toplam veya ortalama, sütun toplam veya ortalama işlemleri için tanımlı fonksiyonlar aşağıda yer almaktadır. rowSums(): satır toplam colSums(): sütun toplam rowMeans(): satır ortalama colMeans(): sütun ortalama rowSums(m1) ## x1 x2 x3 x4 ## 6 8 10 12 colMeans(m1) ## y1 y2 ## 2.5 6.5 Matrislerde çarpma işlemi %*% operatörü ile gerçekleştirilir. c1&lt;-matrix(c(1,2,3,4),2,2) c2&lt;-matrix(c(1,3,1,2),2,2); c1; c2 ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## [,1] [,2] ## [1,] 1 1 ## [2,] 3 2 c1*c2 ## [,1] [,2] ## [1,] 1 3 ## [2,] 6 8 c1%*%c2 ## [,1] [,2] ## [1,] 10 7 ## [2,] 14 10 Herhangi bir matrisin tersini alma işlemi solve() komutu ile gerçekleştirilir. Diziler matrislerdeki satır ve sütune ek olarak bir boyut (h) daha içerir. Birden fazla matrisin yer aldığı \\(r*c*h\\) boyutlu bir yapı olarak düşünülebilir. Dizi içeriği aynı tipte verilerden oluşmalıdır. array(1:12, dim = c(2, 2, 3)) ## , , 1 ## ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## , , 2 ## ## [,1] [,2] ## [1,] 5 7 ## [2,] 6 8 ## ## , , 3 ## ## [,1] [,2] ## [1,] 9 11 ## [2,] 10 12 5.5 Listeler ve Data Frameler (Lists and Data Frames) Listeler vektörlerin özel bir halidir. Vektörler içeriğinde aynı yapıda eleman bulundurma koşuluna sahipken, listeler için böyle bir koşul yoktur. Özetle, listeler farklı yapıda ve boyutta veri tiplerini içerebilir. Liste oluşturmak için ihtiyaç duyulacak fonksiyon list()dir. x &lt;- list(c(1,2,3), &quot;istatistik&quot;, TRUE, 1 + 4i);x ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;istatistik&quot; ## ## [[3]] ## [1] TRUE ## ## [[4]] ## [1] 1+4i Boş bir liste oluşturmak için vector() fonksiyonundan faydalanabilirsiniz. x &lt;- vector(&quot;list&quot;, length = 3);x ## [[1]] ## NULL ## ## [[2]] ## NULL ## ## [[3]] ## NULL Data frameler de iki boyutlu yapılardır. Sütun içerisinde veri tipi aynı olmalıdır ancak sütunlar arası veri tipi farklılık gösterebilir. Regresyon ve farklı istatistiksel hesaplamalarda data frameler sıklıkla kullanılır. Aynı zamanda as.data.frame() fonksiyonu yardımıyla matrisler data framelere dönüştürülebilir. Data frame yapısında yer alan değişkenlerin boyutlarının aynı büyüklükte olması gereklidir. x&lt;-data.frame(Gün=c(&quot;Pzts&quot;,&quot;Salı&quot;,&quot;Çarş&quot;,&quot;Perş&quot;, &quot;Cuma&quot;), Vaka=c(1000,1110,1125,1153,1196));x ## Gün Vaka ## 1 Pzts 1000 ## 2 Salı 1110 ## 3 Çarş 1125 ## 4 Perş 1153 ## 5 Cuma 1196 str komutu yardımıyla data frame yapısının içerik detaylarına ulaşılabilir. str(x) ## &#39;data.frame&#39;: 5 obs. of 2 variables: ## $ Gün : chr &quot;Pzts&quot; &quot;Salı&quot; &quot;Çarş&quot; &quot;Perş&quot; ... ## $ Vaka: num 1000 1110 1125 1153 1196 data olarak isimlendirilen data frame yapısındaki veri ile ilgili farklı seçim işlemleri aşağıdaki tabloda belirtilmiştir. 5.6 Sayısal Olmayan Değerler (Non-Numeric Values) Programlama yaparken sayısal verilerin yanında sayısal olmayan veri tipleri de kullanılmaktadır. Sayısal olmayan veri tipleri; Mantık (logical) Karakter (character) Faktör (factor) olmak üzere üç başlık altında toplanmaktadır. 5.6.1 Mantıksal Değerler Mantıksal değerler TRUE veya FALSE olarak tanımlanabilir. Mantıksal değerler fonksiyonların içinde de sıklıkla kullanılmaktadır. Örneğin sort fonksiyonunda sıralamanın artan veya azalan olmasını belirleyen decreasing=FALSE, ya da matriste eleman dizilimini belirleyen byrow=TRUE gibi. TRUE ve FALSE kısaltması olarak T ve F de kullanılabilir. p&lt;-c(T,F,T,T,T,F,T,F);p ## [1] TRUE FALSE TRUE TRUE TRUE FALSE TRUE FALSE Operatör Anlamı == Eşittir != Eşit değildir &gt; Büyüktür &lt; Küçüktür &gt;= Büyük eşittir &lt;= Küçük eşittir 1==2 ## [1] FALSE 1&gt;2 ## [1] FALSE 1!=(2+5) ## [1] TRUE h&lt;-c(3,2,1,4,1,2,1,-1,0,3) m&lt;-c(4,1,2,1,1,0,0,3,0,4) length(h)==length(m) ## [1] TRUE h==m ## [1] FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE İki mantıksal değeri karşılaştırmak için kullanılan operatörler ve sonuçlar x&lt;-c(T,F,F,T) y&lt;-c(F,F,T,T) x&amp;y ## [1] FALSE FALSE FALSE TRUE x&amp;&amp;y ## [1] FALSE x|y ## [1] TRUE FALSE TRUE TRUE x||y ## [1] TRUE Mantıksal değerler ikili yapıları gereği 1 TRUE ve 0 FALSE olarak tanımlanır. TRUE+TRUE ## [1] 2 T+T+F+T+T+T+F ## [1] 5 1&amp;&amp;1 ## [1] TRUE 1||0 ## [1] TRUE Benzer mantık işlemleri karakter veriler için de uygulanabilir. &quot;alpha&quot;==&quot;alpha&quot; ## [1] TRUE &quot;alpha&quot;!=&quot;beta&quot; ## [1] TRUE 5.6.2 Karakterler Diğer bir yaygın kullanılan veri tipi de karakterlerdir. x&lt;-&quot;OpenAI, kâr amacı gütmeyen bir yapay zeka araştırma şirketidir.&quot; x; length(x) ## [1] &quot;OpenAI, kâr amacı gütmeyen bir yapay zeka araştırma şirketidir.&quot; ## [1] 1 R, dizeyi tek bir varlık olarak ele alır. Diğer bir deyişle, x, 1 uzunluğunda bir vektördür çünkü R, tek tek sözcükler veya karakterler yerine yalnızca farklı dizelerin toplam sayısını sayar. Tek tek karakterlerin sayısını saymak için nchar fonksiyonunu kullanabilirsiniz. nchar(x) ## [1] 63 cat-writing-animation cat ve paste yardımıyla birleştirmek istediğiniz argümanları bir araya getirebilirsiniz. gpt3&lt;-c(&quot;içerik üretmek için derin öğrenmeyi kullanan&quot;, &quot;Generative Pre-trained Transformer 3&quot;, &quot;insanların yazdığı metinlere benzer&quot;) cat(gpt3[2],&quot;(kısaca GPT-3)&quot;,&quot;,&quot;,gpt3[3],gpt3[1],&quot;özbağlanımlı dil modelidir.&quot;) ## Generative Pre-trained Transformer 3 (kısaca GPT-3) , insanların yazdığı metinlere benzer içerik üretmek için derin öğrenmeyi kullanan özbağlanımlı dil modelidir. paste(gpt3[2],&quot;(kısaca GPT-3)&quot;,&quot;,&quot;,gpt3[3],gpt3[1],&quot;özbağlanımlı dil modelidir.&quot;) ## [1] &quot;Generative Pre-trained Transformer 3 (kısaca GPT-3) , insanların yazdığı metinlere benzer içerik üretmek için derin öğrenmeyi kullanan özbağlanımlı dil modelidir.&quot; Elde etmeniz gereken boşluk içermeyen bir metinse bu bilgiyi de fonksiyon içeriğinde belirterek (sep=\"\") uygun çıktıyı elde edebilirsiniz. paste(&quot;bir&quot;,&quot;iki&quot;,&quot;üç&quot;,&quot;dört&quot;, sep=&quot;&quot;) ## [1] &quot;birikiüçdört&quot; Benzer şekilde boşluklar farklı sembollerle de doldurulabilir. paste(&quot;bir&quot;,&quot;iki&quot;,&quot;üç&quot;,&quot;dört&quot;, sep=&quot;**&quot;) ## [1] &quot;bir**iki**üç**dört&quot; paste(&quot;bir&quot;,&quot;iki&quot;,&quot;üç&quot;,&quot;dört&quot;, sep=&quot;--&quot;) ## [1] &quot;bir--iki--üç--dört&quot; Metin içerisinde belli bir kısmı almak istediğinizde substr komutu işlemi kolaylıkla gerçekleştirecektir. x&lt;-&quot;OpenAI, kâr amacı gütmeyen bir yapay zeka araştırma şirketidir.&quot; substr(x,start=32 ,stop=41) ## [1] &quot;yapay zeka&quot; 5.6.3 Faktörler (Factors) Faktörler, kategorik verileri temsil etmek için kullanılır ve sıralanmamış veya sıralanmamış olabilir. Kategorik veriler, veri biliminde önemli bir rol oynamaktadır. Bir faktör, her tam sayının bir etikete sahip olduğu bir tamsayı vektörü olarak düşünülebilir. Faktör nesneleri, factor() işlevi ile oluşturulabilir. k&lt;-factor(c(&quot;evet&quot;,&quot;hayır&quot;,&quot;evet&quot;,&quot;evet&quot;,&quot;evet&quot;,&quot;hayır&quot;));k ## [1] evet hayır evet evet evet hayır ## Levels: evet hayır class(k) ## [1] &quot;factor&quot; table() fonksiyonu ile verideki faktörlerin sıklığını gözlemek mümkündür. table(k) ## k ## evet hayır ## 4 2 Faktör seviyeleri varsayılan yapıda alfabetik olarak sıralanmaktadır, seviyelerin sırasına müdahale etmek levels komutu ile mümkündür. k&lt;-factor(c(&quot;evet&quot;,&quot;hayır&quot;,&quot;evet&quot;,&quot;evet&quot;,&quot;evet&quot;,&quot;hayır&quot;));k # alfabetik ## [1] evet hayır evet evet evet hayır ## Levels: evet hayır k2&lt;-factor(c(&quot;evet&quot;,&quot;hayır&quot;,&quot;evet&quot;,&quot;evet&quot;,&quot;evet&quot;,&quot;hayır&quot;), levels=c(&quot;hayır&quot;,&quot;evet&quot;));k2 ## [1] evet hayır evet evet evet hayır ## Levels: hayır evet Verideki mevcut faktör seviyelerini yine levels komutu ile sorgulayabilirsiniz. aylar&lt;-factor(c(&quot;mart&quot;,&quot;ağustos&quot;,&quot;ekim&quot;,&quot;ocak&quot;, &quot;nisan&quot;,&quot;eylül&quot;,&quot;haziran&quot;,&quot;temmuz&quot;,&quot;şubat&quot;, &quot;mayıs&quot;,&quot;kasım&quot;, &quot;aralık&quot;)) length(aylar) ## [1] 12 class(aylar) ## [1] &quot;factor&quot; levels(aylar) #alfabetik ## [1] &quot;ağustos&quot; &quot;aralık&quot; &quot;ekim&quot; &quot;eylül&quot; &quot;haziran&quot; &quot;kasım&quot; &quot;mart&quot; ## [8] &quot;mayıs&quot; &quot;nisan&quot; &quot;ocak&quot; &quot;şubat&quot; &quot;temmuz&quot; 5.7 Eksik Gözlemler (Missing Values) Eksik gözlemler veri setinde NA veya NaN olarak tanımlanmaktadır. is.na() NA sorgulama için kullanılır. is.nan() NaN sorgulama için kullanılır. NA integer veya character olabilir. NaN aynı zamanda NA iken tersi doğru değildir. NA ve NaN içeren bir seri oluşturup mevcut olma durumunu sorgulamak istersek; x &lt;- c(1, 2, NA, 10, 3, NaN) is.na(x) ## [1] FALSE FALSE TRUE FALSE FALSE TRUE is.nan(x) ## [1] FALSE FALSE FALSE FALSE FALSE TRUE Referans "],["import-export-işlemleri.html", "Bölüm6 Import Export İşlemleri 6.1 Import İşlemleri 6.2 Export İşlemleri", " Bölüm6 Import Export İşlemleri Etkin bir R oturumunun her zaman kendisiyle ilişkilendirilmiş bir çalışma dizini vardır. Veri dosyalarını kaydederken veya içe aktarırken açık bir şekilde bir dosya yolu belirtmediğiniz sürece, R varsayılan olarak bu çalışma dizinini kullanır. Çalışma dizininin konumunu kontrol etmek için getwd() fonksiyonu kullanılabilir. getwd() ## [1] &quot;/Users/busenursarica/Documents/GitHub/rstudio&quot; Dosya yolları her zaman çift tırnak işareti içine alınır. setwd() fonsiyonunu kullanarak varsayılan çalışma dizinini aşağıdaki gibi değiştirebilirsiniz: setwd(&quot;/Users/busenursarica/Documents&quot;) Çalışma dizininde yer alan dosyalar list.files() fonksiyonu ile listelenebilir. list.files() ## [1] &quot;_book&quot; &quot;_bookdown_files&quot; ## [3] &quot;_bookdown.yml&quot; &quot;_output.yml&quot; ## [5] &quot;01-Motivasyon.Rmd&quot; &quot;02-Genel-Bakış.Rmd&quot; ## [7] &quot;03-Yükleme-ve-Tanışma.Rmd&quot; &quot;04-Temel-Nesneler.Rmd&quot; ## [9] &quot;05-Import-Export-İşlemleri.Rmd&quot; &quot;06-Bazı-Önemli-Fonksiyonlar.Rmd&quot; ## [11] &quot;07-DPLYR.Rmd&quot; &quot;08-Grafikler.Rmd&quot; ## [13] &quot;09-Kontrol-Yapıları.Rmd&quot; &quot;10-Fonksiyonlar.Rmd&quot; ## [15] &quot;11-Apply-Ailesi.Rmd&quot; &quot;12-Referans.Rmd&quot; ## [17] &quot;book.bib&quot; &quot;comp3_files&quot; ## [19] &quot;comp3.bbl&quot; &quot;comp3.blg&quot; ## [21] &quot;comp3.log&quot; &quot;comp3.pdf&quot; ## [23] &quot;comp3.Rmd&quot; &quot;comp3.Rproj&quot; ## [25] &quot;comp3.tex&quot; &quot;comp3.toc&quot; ## [27] &quot;dn.csv&quot; &quot;images&quot; ## [29] &quot;index.Rmd&quot; &quot;LICENSE&quot; ## [31] &quot;packages.bib&quot; &quot;preamble.log&quot; ## [33] &quot;preamble.tex&quot; &quot;README.md&quot; ## [35] &quot;style.css&quot; &quot;taiex.xlsx&quot; 6.1 Import İşlemleri Bilgisayarınızda bulunan veri setlerini de R’a çekerek kullanabilirsiniz. read.table(), read.csv(), read_excel() gibi komutlar bu bakımdan işinizi görecektir. Bu noktada çektiğiniz verinin yapısı önem arz etmektedir. Konu ile ilgili farklı yapıda örnekler aşağıda yer almaktadır. Kullanacağınız veri dosya uzantısı .csv ise read.csv() fonksiyonunu veriyi R’a taşımak için kullanabilirsiniz. d&lt;-read.csv(&quot;/Users/busenursarica/Desktop/annual.en.csv&quot;) head(d) ## year industry variable value ## 1 2011 A Activity unit 46134 ## 2 2011 A Rolling mean employees 0 ## 3 2011 A Salaries and wages paid 279 ## 4 2011 A Sales, government funding 8187 ## 5 2011 A Total income 8866 ## 6 2011 A Total expenditure 7618 CSV uzantısı ne anlama gelir? Virgülle ayrılmış değerler (CSV) dosyası, bir veri listesi içeren düz bir metin dosyasıdır. Bu dosyalar genellikle farklı uygulamalar arasında veri alışverişi yapmak için kullanılır. Örneğin, veritabanları ve iletişim yöneticileri genellikle CSV dosyalarını destekler. Bu dosyalar bazen karakterle ayrılmış seğerler veya virgülle ayrılmış dosyalar olarak adlandırılabilir. Verileri ayırmak (veya sınırlandırmak) için çoğunlukla virgül karakterini kullanırlar, ancak bazen noktalı virgül gibi diğer karakterleri kullanırlar. Buradaki fikir, karmaşık verileri bir uygulamadan bir CSV dosyasına aktarabilmeniz ve ardından bu CSV dosyasındaki verileri başka bir uygulamaya aktarabilmenizdir. Bu yapıdaki veriler insan tarafından okunabilir ve not defteri gibi bir metin düzenleyici veya microsoft excel ile kolayca görüntülenebilir. library(readxl) taiex &lt;- read_excel(&quot;taiex.xlsx&quot;) head(taiex) ## # A tibble: 6 x 6 ## `1999` `2000` `2001` `2002` `2003` `2004` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 6152. 8757. 4935. 5600. 4525. 6042. ## 2 6200. 8850. 4895. 5526. 4626. 6125. ## 3 6404. 8922. 5136. 5639. 4690. 6144. ## 4 6422. 8845. 5296. 5835. 4701. 6141. ## 5 6407. 9103. 5189. 5810. 4837. 6169. ## 6 6364. 8927. 5376. 5866. 4814. 6227. Web sitesinde yer alan bir veri setini de R’a çekerek kullanabilirsiniz. w.url &lt;- &quot;http://courses.washington.edu/b517/Datasets/string.txt&quot; dw &lt;- read.table(w.url, header = T) head(dw) ## x y ## 1 10 34.7081 ## 2 12 34.5034 ## 3 14 36.5656 ## 4 16 38.3125 ## 5 18 42.5441 ## 6 20 43.7210 Veri çekmenin bir diğer yolu da environment paneli içerisindeki import dataset yapısının kullanılmasıdır. Bu yapı sayesinde de farklı uzantıdaki veri setleri R’a çekilebilir. Mevcut veri setinizi R’a çekmek yerine R’da yer alan veri setlerini de kullanabilirsiniz. head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 Kütüphanede yer alan farklı veri setlerini de çağırarak kullanabilirsiniz. #install.package(&quot;tseries&quot;) library(tseries) data(ice.river) head(ice.river) ## flow.vat flow.jok prec temp ## [1,] 16.1 30.2 8.1 0.9 ## [2,] 19.2 29.0 4.4 1.6 ## [3,] 14.5 28.4 7.0 0.1 ## [4,] 11.0 27.8 0.0 0.6 ## [5,] 13.6 27.8 0.0 2.0 ## [6,] 12.5 27.8 0.0 0.8 6.2 Export İşlemleri R’da elde edilen yapıların kaydedilmesi için kullanılan fonksiyonlardan biri write.table()’dır. Veri okuma kısmında read.table()’ın farklı versiyonları bulunduğu gibi write komutu için de write.csv() gibi farklı uzantılar için özelleştirilmiş fonksiyonlar bulunmaktadır. dn&lt;-data.frame(a=c(10,34,12),b=c(&quot;deneme&quot;,&quot;bir&quot;,&quot;iki&quot;),c=pi) write.table(dn, file = &quot;dn.csv&quot;, sep = &quot;,&quot;,col.names = NA) Not: file kısmına yalnızca dosya adı yazılırsa, dosya çalışma dizinine kaydolacaktır. "],["bazı-önemli-komutlar.html", "Bölüm7 Bazı Önemli Komutlar 7.1 Sort 7.2 Rank 7.3 Order", " Bölüm7 Bazı Önemli Komutlar Kodlama sırasında sıklıkla kullanılan sort(), rank() ve order() fonksiyonları birbirine karıştırılmaktadır. Temel hedef her bir komutta sıralama olsa da kullanım amaçları ve çıktıları farklıdır. 7.1 Sort Bir vektörü elemanlarının artan veya azalan sırasına göre sıralamak, sıklıkla ihtiyaç duyulan işlevlerden biridir. Bu amaçla kullanılan fonksiyon sort() olmakla birlikte decreasing seçimine bağlı olarak artan veya azalan şekilde sıralama yapmak mümkündür. x&lt;-c(4,8,2,5,1) sort(x, decreasing=T) ## [1] 8 5 4 2 1 7.2 Rank Rank, sıralanan vektördeki değerin konumuna referans verir ve orijinal sıra ile aynıdır. Temelde küçükten büyüğe sıralama hedeflidir, eksi işareti ile büyükten küçüğe sıralama şekline geçilebilir. rank(x) # küçükten büyüğe ## [1] 3 5 2 4 1 rank(-x) # büyükten küçüğe ## [1] 3 1 4 2 5 7.3 Order Order, orijinal değerin konumunu belirler ve sıralar. Temelde küçükten büyüğe sıralama hedeflidir, eksi işareti ile büyükten küçüğe sıralama şekline geçilebilir. Özellikle indeksleme işlemi için kullanışlı bir fonksiyodur. order(x) # küçükten büyüğe ## [1] 5 3 1 4 2 order(-x) # büyükten küçüğe ## [1] 2 4 1 3 5 "],["dplyr.html", "Bölüm8 DPLYR", " Bölüm8 DPLYR Data frame’ler, analizlerde sıklıkla kullandığımız ve ustalıkla yönetebilmemiz gereken veri yapılarıdır. Ders kapsamında data frameler üzerine bazı kodlamalar ve değerlendirmeler yaptık, dplyr paketi kapsamında ise bu uygulamaların kolaylığı için önerilen yapılardan bahsedeceğiz. dplyr paketi, RStudio’dan Hadley Wickham tarafından geliştirilmiştir ve onun plyr paketinin optimize edilmiş ve sadeleştirilmiş bir versiyonudur. dplyr paketi ile elde edilecek tüm sonuçlar temel R yapısı ile elde edilebilir, bu bakımdan dplyr paketi bir yenilik getirmemektedir, paketin katkısı bu elde etme sürecini kolaylaştırmaktır. Bu kapsamda bahsedeğimiz yapılar; select filter arrange rename mutate summarise %&gt;% (pipe operator) Yapılması gereken ilk adım tabi ki paketi indirmek ve kütüphaneden çekmek olmalıdır. Paket yüklendiğinde bazı uyarılar alabilirsiniz çünkü dplyr paketinde diğer paketlerdeki fonksiyonlarla aynı adı taşıyan fonksiyonlar vardır. Şimdilik uyarıları görmezden gelebilirsiniz. select() Büyük veri setleri ile çalışırken select fonksiyonu yardımıyla istenilen değişkenleri seçebilir, veya belirli bir özelliğe göre değişken filtreleme yapabilirsiniz. data(&quot;airquality&quot;) dim(airquality) ## [1] 153 6 str(airquality) ## &#39;data.frame&#39;: 153 obs. of 6 variables: ## $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... ## $ Solar.R: int 190 118 149 313 NA NA 299 99 19 194 ... ## $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... ## $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... ## $ Month : int 5 5 5 5 5 5 5 5 5 5 ... ## $ Day : int 1 2 3 4 5 6 7 8 9 10 ... 153 gözlem ve 6 değişkenden oluşan bu veri setinde Month ve Day değişkenleri üzerine çalışmak istenildiğini varsayalım; library(dplyr) head(select(airquality, Month, Day)) ## Month Day ## 1 5 1 ## 2 5 2 ## 3 5 3 ## 4 5 4 ## 5 5 5 ## 6 5 6 head(select(airquality, Ozone:Temp)) ## Ozone Solar.R Wind Temp ## 1 41 190 7.4 67 ## 2 36 118 8.0 72 ## 3 12 149 12.6 74 ## 4 18 313 11.5 62 ## 5 NA NA 14.3 56 ## 6 28 NA 14.9 66 filter() Büyük veri setleri ile çalışırken filter fonksiyonu yardımıyla istenilen gözlemleri seçebilir, veya belirli bir özelliğe göre gözlem filtreleme yapabilirsiniz. head(filter(airquality, Temp&gt;65)) ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 28 NA 14.9 66 5 6 ## 5 NA 194 8.6 69 5 10 ## 6 7 NA 6.9 74 5 11 filt&lt;-filter(airquality, Temp&gt;65 &amp; Ozone&gt;25) tail(select(filt, Wind, Day)) ## Wind Day ## 60 15.5 6 ## 61 14.9 11 ## 62 6.3 13 ## 63 6.9 16 ## 64 10.3 23 ## 65 6.9 26 arrange() Gözlemlerin değişkene bağlı olarak sıralanması amacıyla kullanılan fonksiyon arrange’dir. str(swiss) ## &#39;data.frame&#39;: 47 obs. of 6 variables: ## $ Fertility : num 80.2 83.1 92.5 85.8 76.9 76.1 83.8 92.4 82.4 82.9 ... ## $ Agriculture : num 17 45.1 39.7 36.5 43.5 35.3 70.2 67.8 53.3 45.2 ... ## $ Examination : int 15 6 5 12 17 9 16 14 12 16 ... ## $ Education : int 12 9 5 7 15 7 7 8 7 13 ... ## $ Catholic : num 9.96 84.84 93.4 33.77 5.16 ... ## $ Infant.Mortality: num 22.2 22.2 20.2 20.3 20.6 26.6 23.6 24.9 21 24.4 ... ss&lt;-arrange(swiss, Fertility) head(select(ss, Fertility, Education),5) ## Fertility Education ## V. De Geneve 35.0 53 ## Rive Gauche 42.8 29 ## Rive Droite 44.7 29 ## La Vallee 54.3 20 ## Lausanne 55.7 28 rename() Data frame yapısında mevcut bir değişkenin ismini değiştirmenin kolay yolu rename fonksiyonunu kullanmaktır. head(swiss) ## Fertility Agriculture Examination Education Catholic ## Courtelary 80.2 17.0 15 12 9.96 ## Delemont 83.1 45.1 6 9 84.84 ## Franches-Mnt 92.5 39.7 5 5 93.40 ## Moutier 85.8 36.5 12 7 33.77 ## Neuveville 76.9 43.5 17 15 5.16 ## Porrentruy 76.1 35.3 9 7 90.57 ## Infant.Mortality ## Courtelary 22.2 ## Delemont 22.2 ## Franches-Mnt 20.2 ## Moutier 20.3 ## Neuveville 20.6 ## Porrentruy 26.6 Yapılacak tanımlamada eşitliği sol tarafı yeni tanımlanan değişken ismini, sağ tarafı ise mevcut değişken ismini temsil edecektir. head(rename(swiss, fer=Fertility, ag=Agriculture)) ## fer ag Examination Education Catholic Infant.Mortality ## Courtelary 80.2 17.0 15 12 9.96 22.2 ## Delemont 83.1 45.1 6 9 84.84 22.2 ## Franches-Mnt 92.5 39.7 5 5 93.40 20.2 ## Moutier 85.8 36.5 12 7 33.77 20.3 ## Neuveville 76.9 43.5 17 15 5.16 20.6 ## Porrentruy 76.1 35.3 9 7 90.57 26.6 mutate() Değişkenlere belirli işlemler uygulayarak veri setine eklemek için kullanışlı fonksiyonlardan biri mutate’dir. head(USArrests) ## Murder Assault UrbanPop Rape ## Alabama 13.2 236 58 21.2 ## Alaska 10.0 263 48 44.5 ## Arizona 8.1 294 80 31.0 ## Arkansas 8.8 190 50 19.5 ## California 9.0 276 91 40.6 ## Colorado 7.9 204 78 38.7 head(mutate(USArrests,rateM=Murder/UrbanPop)) ## Murder Assault UrbanPop Rape rateM ## 1 13.2 236 58 21.2 0.2275862 ## 2 10.0 263 48 44.5 0.2083333 ## 3 8.1 294 80 31.0 0.1012500 ## 4 8.8 190 50 19.5 0.1760000 ## 5 9.0 276 91 40.6 0.0989011 ## 6 7.9 204 78 38.7 0.1012821 Yalnızca dönüştürdüğünüz veri setleri ile çalışmak istediğinizde kullanmanız gereken fonksiyon ise transmute olacaktır. head(transmute(USArrests,rateM=Murder/UrbanPop, cum=Murder/sum(Murder))) ## rateM cum ## 1 0.2275862 0.03389831 ## 2 0.2083333 0.02568053 ## 3 0.1012500 0.02080123 ## 4 0.1760000 0.02259887 ## 5 0.0989011 0.02311248 ## 6 0.1012821 0.02028762 group_by() ve summarise() Veriyi gruplayarak işlem yapılması gerektiğinde group_by komutu işinizi görecektir. Yalnızca komutu çalıştırdığınızda gruplama için seçtiğiniz değişkende sıralama açısından değişiklik olmasını beklemeyin, sıralamanın değişmemesi gruplamanın yapılmadığı anlamına gelmez. head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 mt2&lt;-group_by(mtcars,cyl) summarise(mt2,disp = mean(disp),hp = mean(hp)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 3 x 3 ## cyl disp hp ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 105. 82.6 ## 2 6 183. 122. ## 3 8 353. 209. %&gt;% Pipeline veya pipe operator olarak adlandırılan yapı kod yazımını ve anlaşılmasını kolaylaştırmak için önerilmiştir. Fazla sayıda iç içe komut yazımı verimli olmamakta, hem kodu yazan hem de inceleyen kişinin işini zorlaştırmaktadır. Yazım şekli en içten en dışa doğru olup aşağıda açıklanmaktadır; third(second(first(x))) first(x) %&gt;% second %&gt;% third group_by(mtcars,cyl) %&gt;% summarise(disp = mean(disp),hp = mean(hp)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 3 x 3 ## cyl disp hp ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 105. 82.6 ## 2 6 183. 122. ## 3 8 353. 209. "],["grafikler.html", "Bölüm9 Grafikler 9.1 Mevcut grafik üzerine ekleme yapmak 9.2 Önemli grafik paketleri", " Bölüm9 Grafikler R’in en temel işlevlerinden biri de veri görselleştirmedir, bu bakımdan grafik çeşitleri ve uygulama bakımından oldukça zengin bir yapıya sahiptir. foo &lt;- c(1.1,2,3.5,3.9,4.2) bar &lt;- c(2,2.2,-1.3,0,0.2) plot(foo,bar) Grafik yapısının farklılaştırması amacıyla kullanılabilecek çok çeşitli grafiksel parametreler vardır. Bu parametreler, noktaların renklendirilmesi ve eksen etiketlerinin eklenmesi gibi basit görsel geliştirmeleri çağırır ve ayrıca grafikteki teknik yönleri kontrol edebilir. En sık kullanılan grafik parametrelerinden bazıları burada listelenmiştir; type: R’ye koordinatların nasıl çizileceğini söyler (örneğin, bağımsız noktalar olarak veya çizgilerle veya hem noktalar hem de çizgilerle). plot(foo, bar, type=&quot;l&quot;) main, xlab, ylab: Sırasıyla grafik başlığı, yatay eksen etiketi ve dikey eksen etiketini tanımlamak amacıyla kullanılır. plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;,xlab=&quot;x ekseni&quot;, ylab=&quot;y ekseni&quot;) col: Grafikte yer alan nokta ve çizgilerin renklerinin tanımlanması amacıyla kullanılır. plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,col=2) pch: Nokta karakterin seçiminde kullanılır, bireysel noktaların kullanıldığı grafiklerde noktanın hangi şekil ile temsil edileceğini gösterir. plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;, col=4,pch=8) cex: Çizilen nokta karakterinin boyutunun belirlenmesi amacıyla kullanılır. plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;, col=4,pch=8, cex=2.3) lty: Çizgi tipini belirler (noktalı veya çizgili gibi). plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;, col=6,pch=15,cex=0.7, lty=3) lwd: Grafikte yer alan çizginin kalınlığını belirler. plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;, col=6,pch=15,lty=3,cex=0.7,lwd=2) xlim, ylim: Grafikteki yatay ve dikey eksen genişliğini (grafik alanını) belirler. plot(foo,bar,type=&quot;b&quot;,main=&quot;Grafik adı&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;, col=6,pch=15,lty=3,cex=0.7,lwd=2,xlim=c(3,5),ylim=c(-0.5,0.2)) 9.1 Mevcut grafik üzerine ekleme yapmak Bazı durumlarda sıfırdan grafik üretmek yerine mevcut grafik üzerinde eklemeler yapmak kullanışlı olabilir, veya grafiğiniz üzerinde belirli noktalara vurgu yapma ihtiyacınız doğabilir, bu gibi durumlarda faydalanabileceğimiz fonksiyonlar aşağıda açıklanacaktır. points: nokta ekleme lines, abline, segments: çizgi ekleme text: metin ekleme arrows: ok ekleme legend: etiket ekleme Uygulamalar için lütfen ders videosuna geçiniz. 9.2 Önemli grafik paketleri 9.2.1 lattice Grafik elde etme üzerine ilk önerilen paketlerden biri lattice’dir. Bu kapsamda kullanılabilecek fonksiyonlardan birkaçı aşağıda örneklenmiştir. lattice::xyplot(Sepal.Width ~ Sepal.Length, data = iris) Kategorik değişken içeren verilerde, kategorilere bağlı olarak çoklu grafik elde etmek de mümkündür. Örnek uygulamada irisverisi için Species kategorik değişkendir. levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; lattice::xyplot(Sepal.Width ~ Sepal.Length | Species, data = iris) Paketin temel amacı, karmaşık grafikleri tek bir fonksiyon yardımı ile çizebilmektir, bu bakımdan farklı grafik türleri aşağıda örneklenmiştir. lattice::dotplot(Species ~ Petal.Length, data = iris) lattice::bwplot(Species ~ Petal.Length, data = iris) library(MASS) # Cars93 dataset icin indiriyoruz ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select Cars&lt;-dplyr::select(Cars93,Price,Type,Origin) head(Cars) ## Price Type Origin ## 1 15.9 Small non-USA ## 2 33.9 Midsize non-USA ## 3 29.1 Compact non-USA ## 4 37.7 Midsize non-USA ## 5 30.0 Midsize non-USA ## 6 15.7 Midsize USA lattice::bwplot(Price ~ Type | Origin, data = Cars93) 9.2.2 ggplot2 Grafik oluşturmak için en sık kullanılan paketlerden biri Hadley Wickham tarafından oluşturulan ggplot2’dir. Temeli The Grammar of Graphics kitabına dayanmaktadır. Etkileyici görseller elde etme imkanı sunan ggplot2, bu işlemi qplot() ve ggplot() fonksiyonları ile gerçekleştirmektedir. 9.2.2.1 qplot library(ggplot2) attach(iris) qplot(Sepal.Length, Sepal.Width, color = Species, shape = Species) qplot(Species, Petal.Length, geom = &quot;boxplot&quot;) 9.2.2.2 ggplot ggplot2 paketinin temel fonksiyonu olan ggplot(), gelişmiş görsel raporlama imkanı sunmaktadır. Bu fonksiyonu kullanarak görselleştirme yapılacaksa anlaşılması gereken üç yapı mevcuttur, bunlar aesthetics, geoms, ve stats’dır. aesthetics: aes() fonksiyonu ile görsel seçimler yapılır, konum, renk ve poziyon gibi. geoms aes() fonksiyonu ile tanımlanan işlemlerin grafiğe aktarılmasını sağlar.Bu işlemler geom_point(), geom_line() gibi fonksiyonlar yardımı ile gerçekleştirilir. stats stat_summary(), stat_quantile() gibi fonksiyonlar aracılığı ile verinin özetlenmesini sağlar. p &lt;- ggplot(iris) + geom_point(aes(x = Petal.Length, y = Petal.Width, shape = Species, color = Species)) + xlab(&quot;Petal Length&quot;) + # Add axis labels ylab(&quot;Petal Width&quot;) + ggtitle(&quot;Petal Length and Petal Width of Iris Flowers&quot;) print(p) 9.2.3 plotly İnteraktif grafik elde etme ve html çıktı elde edebilme imkanı plotly paketini de oldukça popüler hale getirmiştir. library(plotly) head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 col1 &lt;- colorRamp(c(&quot;red&quot;, &quot;blue&quot;)) p&lt;-plot_ly(mpg, x = ~cty, y = ~hwy, z = ~cyl) add_markers(p,color = ~cyl, colors = col1) "],["kontrol-yapıları.html", "Bölüm10 Kontrol Yapıları 10.1 if-else 10.2 loops", " Bölüm10 Kontrol Yapıları 10.1 if-else 10.2 loops 10.2.1 for 10.2.2 while 10.2.3 repeat 10.2.4 next, break "],["fonksiyonlar.html", "Bölüm11 Fonksiyonlar", " Bölüm11 Fonksiyonlar "],["apply-ailesi.html", "Bölüm12 Apply Ailesi", " Bölüm12 Apply Ailesi "],["referans.html", "Bölüm13 Referans", " Bölüm13 Referans "]]
